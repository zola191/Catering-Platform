// <auto-generated />
using System;
using Catering.Platform.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Catering.Platform.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250410163049_ChangeCategoriesConfiguration")]
    partial class ChangeCategoriesConfiguration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Catering.Platform.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(-1)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("Catering.Platform.Domain.Models.Dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PortionSize")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("dish", (string)null);
                });

            modelBuilder.Entity("Catering.Platform.Domain.Models.Dish", b =>
                {
                    b.HasOne("Catering.Platform.Domain.Models.Category", "Category")
                        .WithMany("Dishes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Catering.Platform.Domain.Models.AllergenList", "Allergens", b1 =>
                        {
                            b1.Property<Guid>("DishId")
                                .HasColumnType("uuid");

                            b1.HasKey("DishId");

                            b1.ToTable("dish");

                            b1.ToJson("Allergens");

                            b1.WithOwner()
                                .HasForeignKey("DishId");
                        });

                    b.OwnsOne("Catering.Platform.Domain.Models.IngredientList", "Ingredients", b1 =>
                        {
                            b1.Property<Guid>("DishId")
                                .HasColumnType("uuid");

                            b1.HasKey("DishId");

                            b1.ToTable("dish");

                            b1.ToJson("Ingredients");

                            b1.WithOwner()
                                .HasForeignKey("DishId");
                        });

                    b.Navigation("Allergens")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Ingredients")
                        .IsRequired();
                });

            modelBuilder.Entity("Catering.Platform.Domain.Models.Category", b =>
                {
                    b.Navigation("Dishes");
                });
#pragma warning restore 612, 618
        }
    }
}
